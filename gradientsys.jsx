/*   Photoshop Javascripting gradientificationizer System   Copyright (c) 2011, SjG <samuelg@fogbound.net>   All Rights Reserved*/var oFG = app.foregroundColor;var oBG = app.backgroundColor;var rcDelta = oBG.rgb.red - oFG.rgb.red;var gcDelta = oBG.rgb.green - oFG.rgb.green;var bcDelta = oBG.rgb.blue - oFG.rgb.blue;function resetDocumentColors(){    app.foregroundColor = oFG;    app.backgroundColor = oBG;}function gradient(index, start, end, cycles, gtype){    if (gtype == 'step')        return gradientStep(index, start, end, cycles);    if (gtype == 'triangle')        return gradientTriangleWave(index, start, end, cycles);    return gradientSineWave(index, start, end, cycles);}function gradientStep(index, start,end, cycles){    var interval = (end - start)/cycles;       var factor = (index % interval) / interval;    var ret = new Array();    ret['red'] = oFG.rgb.red + factor * rcDelta;    ret['green'] = oFG.rgb.green + factor * gcDelta;    ret['blue'] = oFG.rgb.blue + factor * bcDelta;    return ret;}function gradientTriangleWave(index, start, end, cycles){    var interval = (end - start)/cycles;       var factor = (index % interval)/interval;    var cycleno = Math.floor(index/interval);    var ret = new Array();    if (cycleno % 2 == 0)        {        ret['red'] = oBG.rgb.red - factor * rcDelta;        ret['green'] = oBG.rgb.green - factor * gcDelta;        ret['blue'] = oBG.rgb.blue - factor * bcDelta;        }    else       {        ret['red'] = oFG.rgb.red + factor * rcDelta;        ret['green'] = oFG.rgb.green + factor * gcDelta;        ret['blue'] = oFG.rgb.blue + factor * bcDelta;        }    return ret;}function gradientSineWave(index, start, end, cycles){    var interval = (end - start)/cycles;    var factor =   Math.PI * (index % interval) / interval;    factor = Math.sin(factor);    var ret = new Array();    ret['red'] = oFG.rgb.red + factor * rcDelta;    ret['green'] = oFG.rgb.green + factor * gcDelta;    ret['blue'] = oFG.rgb.blue + factor * bcDelta;    return ret;}