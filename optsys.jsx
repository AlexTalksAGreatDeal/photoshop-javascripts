/*   Photoshop Javascripting Option System   Copyright (c) 2011, SjG <samuelg@fogbound.net>   All Rights Reserved*/   var optsys_debug = false;function isNumber(n){  return !isNaN(parseFloat(n)) && isFinite(n);}function OptObject(init){	for (fld in init['fields'])		{			if (typeof(init['fields'][fld]['default']) !== 'undefined')				{				this[fld] = init['fields'][fld]['default'];				}		}}OptObject.prototype.duplicate = function(){	var newOpts = new OptObject();	for (i in this)		{		newOpts[i] = this[i];		}	return newOpts;}OptObject.prototype.toString = function(){	var ret = "";	for (i in this)		{		if(typeof(this[i]) != 'function')			{			ret += i + " = " +this[i]+ " ("+typeof(this[i])+")\r\n";			}		}	return ret;}OptObject.prototype.toFileString = function(){	var ret = "";	for (i in this)		{		if(typeof(this[i]) != 'function')			{			ret += i + "@" +this[i]+"@"+typeof(this[i])+"\n";			}		}	return ret;}OptObject.prototype.writeToMetadataOld = function(name){	var agroup = app.activeDocument.layerSets.add();	agroup.name = name;	var count = 1;		for (i in this)		{		if(typeof(this[i]) != 'function')			{			var TextLayer = activeDocument.artLayers.add();			TextLayer.kind = LayerKind.TEXT;			TextLayer.move(agroup,ElementPlacement.INSIDE);			var txtRef = TextLayer.textItem;			txtRef.font = "Helvetica";			txtRef.contents = i+' = '+this[i];			txtRef.size = 12;			var textPosition = [10,count * 14];			txtRef.position = textPosition;			count += 1;			}		}		var newLayer = agroup.merge();	newLayer.visibile = false;}OptObject.prototype.writeToMetadata = function(name){			var TextLayer = activeDocument.artLayers.add();			TextLayer.name = name;			TextLayer.kind = LayerKind.TEXT;			var txtRef = TextLayer.textItem;			txtRef.kind = TextType.PARAGRAPHTEXT;			txtRef.font = "Helvetica";			txtRef.width = 600;			txtRef.height = 800;			txtRef.contents = this.toString();			txtRef.size = 12;			var textPosition = [10,10];			txtRef.position = textPosition;	TextLayer.visible = false;}OptObject.prototype.doDialog = function(init){	var spacing = 4;	var textHeight = 18;	var inputHeight = 20;	var buttonHeight = 20;	var rowHeight = inputHeight + spacing;	var total_height = 2 * (buttonHeight + spacing);	var total_width = 540;	var hpadding = 5;	var vpadding = 7;	if (typeof(init['ui']['width']) !== 'undefined')		{		total_width = init['ui']['width'];		}	var inner_width = total_width - 2 * hpadding;	var fieldsets=new Array;    var tagStates = new Array;    var tagHeight = new Array;    var count = 0;	var maxcols = 3;	for (var fs in init['ui']['fieldsets'])		{		if (!isNumber(fs)) continue; 	   fieldsets[count]=new Array;        if (init['ui']['fieldsets'][fs]['tag'])            {             fieldsets[count]['tag'] = init['ui']['fieldsets'][fs]['tag'];             fieldsets[count]['height'] = 0;             if (typeof(tagStates[fieldsets[count]['tag']]) == 'undefined')                {                tagStates[fieldsets[count]['tag']] = new Array;                }             tagStates[fieldsets[count]['tag']][init['ui']['fieldsets'][fs]['state']] = count;            }		fieldsets[count]['columns'] = init['ui']['fieldsets'][fs]['columns'].length;		if (fieldsets[count]['columns'] > maxcols)			{			maxcols = fieldsets[count]['columns'];			}		fieldsets[count]['rows'] = 0;		for (i=0; i< init['ui']['fieldsets'][fs]['columns'].length;i++)			{			if (init['ui']['fieldsets'][fs]['columns'][i].length > fieldsets[count]['rows'])				{				fieldsets[count]['rows'] = init['ui']['fieldsets'][fs]['columns'][i].length;				}			}         fieldsets[count]['height'] = fieldsets[count]['rows'] * rowHeight + 2*vpadding;		count += 1;		}	for (var ts in tagStates)		{         var th = 0;		for (var f in tagStates[ts])            {            if (fieldsets[tagStates[ts][f]]['height'] > th)                {                th = fieldsets[tagStates[ts][f]]['height'];                }            }        tagHeight[ts] = new Array;        tagHeight[ts]['height'] = th;        tagHeight[ts]['seen'] = 0;        }    for (var i in fieldsets)	   {        if (typeof(fieldsets[i]['tag']) !== 'undefined')            {            if (tagHeight[fieldsets[i]['tag']]['seen'] == 0)                {                total_height += tagHeight[fieldsets[i]['tag']]['height'] + vpadding;                tagHeight[fieldsets[i]['tag']]['seen'] = 1;                }            }        else            {            total_height += fieldsets[i]['height'] + vpadding;            }        }	var c = new Array;	maxcols *= 2;	for (var i=1;i<=maxcols;i++)		{		c[i] = new Array;		for (j=0;j<i;j++)			{			c[i][j+1] = [hpadding+j*inner_width/i, ((j+1)*inner_width/i)-2*hpadding];			}		}	var ptr = 0;	var title = (typeof(init['ui']['title']) === 'undefined')?'Configuration Options':init['ui']['title'];	var dialog = new Window('dialog',title, [0,0,total_width,total_height]);    var panels = new Array;    var actions = new Array;	dialog.togglePanel = function(tag,state) {            for (var z in tagStates[tag])                {                if (z == state)                    {                    panels[tagStates[tag][z]]['panel'].visible = true;                    }                else                    {                    panels[tagStates[tag][z]]['panel'].visible = false;                    }                }        };	dialog.togglePanelState = function(field,tag,state) {         panels[tagStates[tag][state]]['panel'].visible = field.value;         };   dialog.makeSetState = function(field,tag,state) {         return function() {              dialog.togglePanelState(field,tag,state);              };        };   dialog.makeOnClick = function(tag,state) {          return function() {              dialog.togglePanel(tag,state);              };           };    var tagStart = new Array;	for (var i in fieldsets)        {		if (!isNumber(i) || typeof(i) == 'function') continue;		panels[i]= new Array;        if (typeof(init['ui']['fieldsets'][i]['tag']) !== 'undefined')            {            if (typeof(tagStart[init['ui']['fieldsets'][i]['tag']]) == 'undefined')                {                tagStart[init['ui']['fieldsets'][i]['tag']] = ptr;                }            else                {                ptr = tagStart[init['ui']['fieldsets'][i]['tag']];                }            panels[i]['panel']=dialog.add('panel',                [5,ptr,total_width-5,ptr+tagHeight[fieldsets[i]['tag']]['height']+vpadding],                init['ui']['fieldsets'][i]['title']);            }        else            {            panels[i]['panel']=dialog.add('panel',                [5,ptr,total_width-5,ptr+fieldsets[i]['height']+vpadding],                init['ui']['fieldsets'][i]['title']);            }        if (optsys_debug) $.writeln('panel: '+init['ui']['fieldsets'][i]['title']+' ptr: '+ptr);        			         if (optsys_debug) $.writeln(init['ui']['fieldsets'][i]['columns']);		for (var j=0; j<init['ui']['fieldsets'][i]['columns'].length;j++)			{			sptr = vpadding;			for (var k=0; k<init['ui']['fieldsets'][i]['columns'][j].length; k++)				{				var fld = init['ui']['fieldsets'][i]['columns'][j][k];                if (optsys_debug) $.writeln('-> fld: '+fld);				var flddef = init['fields'][fld];				if (optsys_debug) $.writeln('fieldset '+i+' column '+(j+1)+' (j='+j+') field '+fld+' sptr='+sptr);                if (optsys_debug) $.writeln('fieldsets[i]: '+fieldsets[i]);				var cols = fieldsets[i]['columns'] * 2;                if (optsys_debug) $.writeln('cols->' + cols);                panels[i]['label'+fld] = panels[i]['panel'].add('statictext',[c[cols][j*2+1][0],sptr,c[cols][j*2+1][1],sptr+textHeight],					flddef['label']+':');				if (flddef['input'] == 'checkbox')					{					panels[i][fld] = panels[i]['panel'].add('checkbox',[c[cols][j*2+2][0],sptr,c[cols][j*2+2][1],sptr+inputHeight],					   (typeof(flddef['shortlabel'])!='undefined')?flddef['shortlabel']:flddef['label']);					}				else if (flddef['input'] == 'text')					{					panels[i][fld] = panels[i]['panel'].add('edittext',[c[cols][j*2+2][0],sptr,c[cols][j*2+2][1],sptr+inputHeight],						'');					}                 else if (flddef['input'] == 'static')                     {                     panels[i][fld] = panels[i]['panel'].add('statictext',[c[cols][j*2+2][0],sptr,c[cols][j*2+2][1],sptr+inputHeight],flddef['value']);                     }				else if (flddef['input'] == 'radio')					{					var rwidth = (c[cols][j*2+2][1] - c[cols][j*2+2][0]);					var rcount = 0;					for (l in flddef['options'])						{						rcount+=1;						}					rwidth = rwidth / rcount;					rcount = 0;					panels[i][fld] = new Array;					for (l in flddef['options'])						{                    						panels[i][fld][l] = panels[i]['panel'].add('radiobutton',							[c[cols][j*2+2][0] + rcount * rwidth,sptr,							c[cols][j*2+2][0] + (rcount+1) * rwidth,sptr+inputHeight],                               ((typeof(flddef['options'][l]) == 'string')?flddef['options'][l]:flddef['options'][l]['label']));                          if (typeof(flddef['options'][l]) == 'object')                            {                            //panels[i][fld][l].onClick = function(opt){function(){alert(flddef['options'][opt]['tag'])}}(l);                            //panels[i][fld][l].onClick = function() {dialog.togglePanel(flddef['options'][l]['tag']); };                            panels[i][fld][l].onClick = dialog.makeOnClick(flddef['options'][l]['tag'],flddef['options'][l]['state']);                            panels[i][fld][l].setState= dialog.makeSetState(panels[i][fld][l],flddef['options'][l]['tag'],flddef['options'][l]['state']);                            }                          else                            {                            panels[i][fld][l].setState=null;                            }						rcount += 1;						}					}				else if (flddef['input'] == 'slider')					{					var rwidth = (c[cols][j*2+2][1] - c[cols][j*2+2][0]) / 3;					panels[i][fld] = new Array;					if (optsys_debug) $.writeln('cols '+cols+' j*2+2='+(j*2+2));					panels[i][fld][0] = panels[i]['panel'].add('slider',							[c[cols][j*2+2][0],sptr,							c[cols][j*2+2][0] + 2*rwidth - hpadding,sptr+inputHeight],0,							flddef['min'],flddef['max']);					panels[i][fld][1] = panels[i]['panel'].add('edittext',							[c[cols][j*2+2][0]+ 2*rwidth,sptr,							c[cols][j*2+2][0] + 3*rwidth,sptr+inputHeight],0);					panels[i][fld][0].counterpart = panels[i][fld][1];					panels[i][fld][1].counterpart = panels[i][fld][0];					if (flddef['numbertype'] == 'int')						{						panels[i][fld][0].onChanging = function()							{							this.counterpart.text = Math.round(this.value);							}						}					else						{						panels[i][fld][0].onChanging = function()							{							this.counterpart.text = this.value;							}						}					panels[i][fld][1].onChange = function()						{						this.counterpart.value = this.text;						}					}                 if (typeof(flddef['show']) !== 'undefined')                      {                      panels[i][fld].visible = flddef['show'];                      panels[i]['label'+fld].visible = flddef['show'];                      }				sptr += rowHeight;				}			}            if (typeof(init['ui']['fieldsets'][i]['tag']) !== 'undefined')                {                ptr += tagHeight[fieldsets[i]['tag']]['height']+vpadding;                }            else                {                ptr += fieldsets[i]['height'] + vpadding;                }		}			dialog.load = dialog.add('button',[c[3][1][0],ptr,c[3][1][1],ptr+buttonHeight],'Load...');	dialog.save = dialog.add('button',[c[3][3][0],ptr,c[3][3][1],ptr+buttonHeight],'Save...');		ptr += rowHeight;	dialog.cancel = dialog.add('button',[c[3][1][0],ptr,c[3][1][1],ptr+buttonHeight],'Cancel');	dialog.reset = dialog.add('button',[c[3][2][0],ptr,c[3][2][1],ptr+buttonHeight],'Reset');	dialog.ok = dialog.add('button',[c[3][3][0],ptr,c[3][3][1],ptr+buttonHeight],'OK');	dialog.cancel.onClick = function() {dialog.close(0);}	dialog.ok.onClick = function() {dialog.close(1);}    dialog.updateUIFromOpts = function()		{		for (var i in fieldsets)			{			if (!isNumber(i)) continue;			for (var j=0; j<init['ui']['fieldsets'][i]['columns'].length;j++)				{				for (var k=0; k<init['ui']['fieldsets'][i]['columns'][j].length; k++)					{					var fld = init['ui']['fieldsets'][i]['columns'][j][k];					var flddef = init['fields'][fld];					if (flddef['input'] == 'checkbox')						{						panels[i][fld].value = dialog.opt[fld];						}					else if (flddef['input'] == 'text')						{						panels[i][fld].text = dialog.opt[fld];						}					else if (flddef['input'] == 'radio')						{						for (var l in flddef['options'])							{							if (dialog.opt[fld] == l)								{								panels[i][fld][l].value = true;								}							else								{								panels[i][fld][l].value = false;								}							}						}					else if (flddef['input'] == 'slider')						{						panels[i][fld][0].value = dialog.opt[fld];						panels[i][fld][1].text = dialog.opt[fld];						}					}				}			} 		for (var i in fieldsets)			{			if (!isNumber(i)) continue;			for (var j=0; j<init['ui']['fieldsets'][i]['columns'].length;j++)				{				for (var k=0; k<init['ui']['fieldsets'][i]['columns'][j].length; k++)                     {                     var fld = init['ui']['fieldsets'][i]['columns'][j][k];					var flddef = init['fields'][fld];                     if (flddef['input'] == 'radio')                        {                        for (var l in flddef['options'])                            {                            if (typeof (panels[i][fld][l].setState) == 'function')                                {                                panels[i][fld][l].setState();                                }                            }                         }                     }                 }             }		}	dialog.updateOptsFromUI = function()		{		for (i in fieldsets)			{			for (j=0; j<init['ui']['fieldsets'][i]['columns'].length;j++)				{				for (k=0; k<init['ui']['fieldsets'][i]['columns'][j].length; k++)					{					var fld = init['ui']['fieldsets'][i]['columns'][j][k];					var flddef = init['fields'][fld];					if (flddef['input'] == 'checkbox')						{						dialog.opt[fld] = panels[i][fld].value;						}					else if (flddef['input'] == 'text')						{						dialog.opt[fld] = panels[i][fld].text;						}					else if (flddef['input'] == 'radio')						{						for (l in flddef['options'])							{							if (panels[i][fld][l].value == true)								{								dialog.opt[fld] = l;								}							}						}					else if (flddef['input'] == 'slider')						{						if (flddef['numbertype'] == 'int')							dialog.opt[fld] = Math.round(panels[i][fld][0].value);						else							dialog.opt[fld] = panels[i][fld][0].value;												}					}				}			}		}		dialog.reset.onClick = function()		{		if (confirm("Reset all values to default?"))			{			dialog.updateUIFromOpts();			}		}	dialog.save.onClick = function()		{		dialog.updateOptsFromUI();		var filespec = File.saveDialog("Save settings as..."); 		if (dialog.saveFile(filespec))			{			alert("Saved.");			}		}	dialog.saveFile = function(filespec)		{		if (filespec != null)			{			filespec.open('w');			filespec.writeln(opts.toFileString());			filespec.close();			return true;			}		return false;		}	dialog.loadFile = function(filespec)		{		if (filespec != null)			{			filespec.open('r');			looping = true;			while (looping)				{				var ln = filespec.readln();				if (ln == null || ln.indexOf('@') == -1)					{					looping = false;					}				else					{					var lne = ln.split('@');					$.writeln(lne[0]);					if (lne[2] == 'number')						{						dialog.opt[lne[0]] = Number(lne[1]);						}					else if (lne[2] == 'boolean')						{						dialog.opt[lne[0]] = (lne[1]=='true');						}					else if (lne[2] == 'string')						{						dialog.opt[lne[0]] = lne[1];						}						}				}			filespec.close();			}		}	dialog.load.onClick = function()		{		var filespec = File.openDialog("Select the settings you'd like to load"); 		dialog.loadFile(filespec);		dialog.updateUIFromOpts();		alert("Loaded.");		}		dialog.center();	dialog.opt = this;	dialog.updateUIFromOpts();	value = dialog.show();	if (value == 1)		{		dialog.updateOptsFromUI();		return true;		}	return false;}