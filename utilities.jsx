/*   Photoshop Javascripting Utility Functions   Copyright (c) 2011, SjG <samuelg@fogbound.net>   All Rights Reserved*/   var utilities_debug = false;function deg_to_radians(angle){	return angle * (Math.PI / 180.0);}function radians_to_deg(angle){	return angle * 180 / Math.PI;}function intersectionPoint(x1,y1,x2,y2,x3,y3,x4,y4){   var denom  = (y4-y3) * (x2-x1) - (x4-x3) * (y2-y1);   var numera = (x4-x3) * (y1-y3) - (y4-y3) * (x1-x3);   var numerb = (x2-x1) * (y1-y3) - (y2-y1) * (x1-x3);      if (Math.abs(numera) < 0.001 && Math.abs(numerb) < 0.001 && Math.abs(denom) < 0.001)   {    // same line    return(true);   }       if (Math.abs(denom) == 0)   {      // parallel      return(false);   }   var ipa = numera / denom;   var ipb = numerb / denom;   if (ipa < 0 || ipa > 1 || ipb < 0 || ipb > 1)   {      // no intersection      return(false);   }   x = x1 + ipa * (x2 - x1);   y = y1 + ipb * (y2 - y1);   return([x,y]);} function WaitForRedraw(){     eventID = charIDToTypeID( "Wait" );     keyID = charIDToTypeID( "Stte" );     enumID = charIDToTypeID( "RdCm" );     desc = new ActionDescriptor();     desc.putEnumerated( keyID, keyID, enumID );     executeAction( eventID, desc, DialogModes.NO );}function drawCircle(left,top,right,bottom,antiAlias){var idDraw = charIDToTypeID( "Draw" );    var desc6 = new ActionDescriptor();    var idShp = charIDToTypeID( "Shp " );        var desc7 = new ActionDescriptor();        var idTop = charIDToTypeID( "Top " );        var idPxl = charIDToTypeID( "#Pxl" );        desc7.putUnitDouble( idTop, idPxl, top );        var idLeft = charIDToTypeID( "Left" );        var idPxl = charIDToTypeID( "#Pxl" );        desc7.putUnitDouble( idLeft, idPxl, left );        var idBtom = charIDToTypeID( "Btom" );        var idPxl = charIDToTypeID( "#Pxl" );        desc7.putUnitDouble( idBtom, idPxl, bottom );        var idRght = charIDToTypeID( "Rght" );        var idPxl = charIDToTypeID( "#Pxl" );        desc7.putUnitDouble( idRght, idPxl, right );    var idElps = charIDToTypeID( "Elps" );    desc6.putObject( idShp, idElps, desc7 );    var idAntA = charIDToTypeID( "AntA" );    desc6.putBoolean( idAntA, antiAlias );executeAction( idDraw, desc6, DialogModes.NO );}function strokeLine(x1,y1,x2,y2,width){var id34 = charIDToTypeID( "Draw" );    var desc7 = new ActionDescriptor();    var id35 = charIDToTypeID( "Shp " );        var desc8 = new ActionDescriptor();        var id36 = charIDToTypeID( "Strt" );            var desc9 = new ActionDescriptor();            var id37 = charIDToTypeID( "Hrzn" );            var id38 = charIDToTypeID( "#Pxl" );            desc9.putUnitDouble( id37, id38, x1 );            var id39 = charIDToTypeID( "Vrtc" );            var id40 = charIDToTypeID( "#Pxl" );            desc9.putUnitDouble( id39, id40, y1 );        var id41 = charIDToTypeID( "Pnt " );        desc8.putObject( id36, id41, desc9 );        var id42 = charIDToTypeID( "End " );            var desc10 = new ActionDescriptor();            var id43 = charIDToTypeID( "Hrzn" );            var id44 = charIDToTypeID( "#Pxl" );            desc10.putUnitDouble( id43, id44, x2 );            var id45 = charIDToTypeID( "Vrtc" );            var id46 = charIDToTypeID( "#Pxl" );            desc10.putUnitDouble( id45, id46, y2 );        var id47 = charIDToTypeID( "Pnt " );        desc8.putObject( id42, id47, desc10 );        var id48 = charIDToTypeID( "Wdth" );        var id49 = charIDToTypeID( "#Pxl" );        desc8.putUnitDouble( id48, id49, width );    var id50 = charIDToTypeID( "Ln  " );    desc7.putObject( id35, id50, desc8 );    var id51 = charIDToTypeID( "AntA" );    desc7.putBoolean( id51, true );executeAction( id34, desc7, DialogModes.NO );}function strokeBounds(b,width){	//$.writeln(b);	strokeLine(b[0],b[1],b[2],b[1],1);	strokeLine(b[2],b[1],b[2],b[3],1);	strokeLine(b[2],b[3],b[0],b[3],1);	strokeLine(b[0],b[3],b[0],b[1],1);}function flipSelectionHorizontal(){var id68 = charIDToTypeID( "Flip" );    var desc13 = new ActionDescriptor();    var id69 = charIDToTypeID( "null" );        var ref2 = new ActionReference();        var id70 = charIDToTypeID( "Lyr " );        var id71 = charIDToTypeID( "Ordn" );        var id72 = charIDToTypeID( "Trgt" );        ref2.putEnumerated( id70, id71, id72 );    desc13.putReference( id69, ref2 );    var id73 = charIDToTypeID( "Axis" );    var id74 = charIDToTypeID( "Ornt" );    var id75 = charIDToTypeID( "Hrzn" );    desc13.putEnumerated( id73, id74, id75 );executeAction( id68, desc13, DialogModes.NO );}function flipSelectionVertical(){	var id3 = charIDToTypeID( "Flip" );    var desc2 = new ActionDescriptor();    var id4 = charIDToTypeID( "null" );        var ref1 = new ActionReference();        var id5 = charIDToTypeID( "Lyr " );        var id6 = charIDToTypeID( "Ordn" );        var id7 = charIDToTypeID( "Trgt" );        ref1.putEnumerated( id5, id6, id7 );    desc2.putReference( id4, ref1 );    var id8 = charIDToTypeID( "Axis" );    var id9 = charIDToTypeID( "Ornt" );    var id10 = charIDToTypeID( "Vrtc" );    desc2.putEnumerated( id8, id9, id10 );executeAction( id3, desc2, DialogModes.NO );}function rotateLayerAroundCenter(deg){var id9 = charIDToTypeID( "Trnf" );    var desc3 = new ActionDescriptor();    var id10 = charIDToTypeID( "null" );        var ref2 = new ActionReference();        var id11 = charIDToTypeID( "Lyr " );        var id12 = charIDToTypeID( "Ordn" );        var id13 = charIDToTypeID( "Trgt" );        ref2.putEnumerated( id11, id12, id13 );    desc3.putReference( id10, ref2 );    var id14 = charIDToTypeID( "FTcs" );    var id15 = charIDToTypeID( "QCSt" );    var id16 = charIDToTypeID( "Qcsi" );    desc3.putEnumerated( id14, id15, id16 );    var id17 = charIDToTypeID( "Pstn" );        var desc4 = new ActionDescriptor();        var id18 = charIDToTypeID( "Hrzn" );        var id19 = charIDToTypeID( "#Pxl" );        desc4.putUnitDouble( id18, id19, activeDocument.width/2 );        var id20 = charIDToTypeID( "Vrtc" );        var id21 = charIDToTypeID( "#Pxl" );        desc4.putUnitDouble( id20, id21, activeDocument.height/2 );    var id22 = charIDToTypeID( "Pnt " );    desc3.putObject( id17, id22, desc4 );    var id23 = charIDToTypeID( "Ofst" );        var desc5 = new ActionDescriptor();        var id24 = charIDToTypeID( "Hrzn" );        var id25 = charIDToTypeID( "#Pxl" );        desc5.putUnitDouble( id24, id25, 0.000000 );        var id26 = charIDToTypeID( "Vrtc" );        var id27 = charIDToTypeID( "#Pxl" );        desc5.putUnitDouble( id26, id27, 0.000000 );    var id28 = charIDToTypeID( "Ofst" );    desc3.putObject( id23, id28, desc5 );    var id29 = charIDToTypeID( "Angl" );    var id30 = charIDToTypeID( "#Ang" );    desc3.putUnitDouble( id29, id30, deg );executeAction( id9, desc3, DialogModes.NO );}// min/max radius of selectionfunction min_max_radius_of_selection(allow_skipping_for_speed){    var b = app.activeDocument.selection.bounds;	makeWorkPathOfSelection();        var cx = parseInt(b[2]) - parseInt(b[0]);    var cy = parseInt(b[3]) - parseInt(b[1]);	var activePath = app.activeDocument.pathItems.getByName("Work Path");	var p_low = -1;	var p_high = -1;	if (utilities_debug) $.writeln("Number of paths to consider: "+activePath.subPathItems.length);	for (q=0;q<activePath.subPathItems.length;q++)		{		var pathPoints = activePath.subPathItems[q].pathPoints;				var increm = 1;		if (allow_skipping_for_speed && pathPoints.length > 100 && pathPoints.length < 500)			{			increm = 5;			}		else if (allow_skipping_for_speed && pathPoints.length >= 500)			{			increm = 10;			}						// find the highest/lowest points		if (utilities_debug) $.writeln("Path "+q+" points: "+pathPoints.length+", testing every "+increm);        var min = 1000;        var max = 0;		for (z = 0; z< pathPoints.length;z+=increm)			{			if (utilities_debug && z%(25*increm) == 0) $.write(z+".");			var pp = pathPoints[z];             var dx = pp.anchor[0] -  cx;             var dy = pp.anchor[1] - cy;             var r = Math.sqrt(dx * dx + dy * dy);             if (r < min)                {                min = r;                }            else if (r > max)                {                max = r;                } 			}		if (utilities_debug) writeln(" path complete.");		}	activePath.remove();		return [min,max];}function makeWorkPathOfSelection(){var idMk = charIDToTypeID( "Mk  " );    var desc163 = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );        var ref2 = new ActionReference();        var idPath = charIDToTypeID( "Path" );        ref2.putClass( idPath );    desc163.putReference( idnull, ref2 );    var idFrom = charIDToTypeID( "From" );        var ref3 = new ActionReference();        var idcsel = charIDToTypeID( "csel" );        var idfsel = charIDToTypeID( "fsel" );        ref3.putProperty( idcsel, idfsel );    desc163.putReference( idFrom, ref3 );    var idTlrn = charIDToTypeID( "Tlrn" );    var idPxl = charIDToTypeID( "#Pxl" );    desc163.putUnitDouble( idTlrn, idPxl, 2.000000 );executeAction( idMk, desc163, DialogModes.NO );}